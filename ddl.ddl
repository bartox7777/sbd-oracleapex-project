-- Generated by Oracle SQL Developer Data Modeler 22.2.0.165.1149
--   at:        2024-01-20 21:23:38 CET
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE grupy (
    id    INTEGER NOT NULL,
    nazwa VARCHAR2(20) NOT NULL,
    typ   VARCHAR2(20) NOT NULL
);

ALTER TABLE grupy
    ADD CHECK ( typ IN ( 'Cwiczeniowa', 'Laboratoryjna', 'Wykladowa' ) );

ALTER TABLE grupy ADD CONSTRAINT grupa_pk PRIMARY KEY ( id );

CREATE TABLE grupy_studentow (
    id         INTEGER NOT NULL,
    student_id INTEGER NOT NULL,
    grupa_id   INTEGER NOT NULL
);

ALTER TABLE grupy_studentow ADD CONSTRAINT grupy_studentow_pk PRIMARY KEY ( id );

ALTER TABLE grupy_studentow ADD CONSTRAINT grupy_studentow__un UNIQUE ( student_id,
                                                                        grupa_id );

CREATE TABLE kierunki_studentow (
    id                  INTEGER NOT NULL,
    student_id          INTEGER NOT NULL,
    kierunek_studiow_id INTEGER NOT NULL,
    obecny_semestr      INTEGER DEFAULT 1 NOT NULL,
    stopien_studiow     INTEGER DEFAULT 1 NOT NULL
);

ALTER TABLE kierunki_studentow ADD CONSTRAINT kierunki_studentow_pk PRIMARY KEY ( id );

ALTER TABLE kierunki_studentow ADD CONSTRAINT kierunki_studentow__un UNIQUE ( student_id,
                                                                              kierunek_studiow_id );

CREATE TABLE kierunki_studiow (
    id         INTEGER NOT NULL,
    nazwa      VARCHAR2(50) NOT NULL,
    wydzial_id INTEGER NOT NULL
);

ALTER TABLE kierunki_studiow ADD CONSTRAINT kierunek_studi�w_pk PRIMARY KEY ( id );

CREATE TABLE kursy (
    id                  INTEGER NOT NULL,
    nazwa               VARCHAR2(50) NOT NULL,
    punkty_ects         INTEGER NOT NULL,
    rok_akademicki      VARCHAR2(20) NOT NULL,
    kierunek_studiow_id INTEGER NOT NULL,
    kierownik_kursu     INTEGER
);

ALTER TABLE kursy ADD CONSTRAINT kurs_pk PRIMARY KEY ( id );

CREATE TABLE oceny (
    id         INTEGER NOT NULL,
    stopien    VARCHAR2(3) NOT NULL,
    komentarz  VARCHAR2(10000),
    data       DATE NOT NULL,
    student_id INTEGER NOT NULL,
    zajecia_id INTEGER NOT NULL
);

ALTER TABLE oceny
    ADD CHECK ( stopien IN ( '2.0', '3.0', '3.5', '4.0', '4.5',
                             '5.0' ) );

ALTER TABLE oceny ADD CONSTRAINT ocena_pk PRIMARY KEY ( id );

ALTER TABLE oceny ADD CONSTRAINT oceny__un UNIQUE ( student_id,
                                                    zajecia_id );

CREATE TABLE pracownicy (
    id                      INTEGER NOT NULL,
    imie                    VARCHAR2(30) NOT NULL,
    nazwisko                VARCHAR2(30) NOT NULL,
    stopien_naukowy         VARCHAR2(30),
    tygodniowy_limit_godzin INTEGER
);

ALTER TABLE pracownicy ADD CONSTRAINT pracownik_pk PRIMARY KEY ( id );

CREATE TABLE rezerwacje_sal (
    id                  INTEGER NOT NULL,
    jednostka_zajeciowa INTEGER NOT NULL,
    dzien_tygodnia      VARCHAR2(30) NOT NULL,
    tydzien             VARCHAR2(30) NOT NULL,
    zajecia_id          INTEGER NOT NULL,
    sala_id             INTEGER NOT NULL
);

ALTER TABLE rezerwacje_sal ADD CHECK ( jednostka_zajeciowa BETWEEN 1 AND 20 );

ALTER TABLE rezerwacje_sal
    ADD CHECK ( dzien_tygodnia IN ( 'Czw', 'Nd', 'Pon', 'Pt', 'Sob',
                                    'Sr', 'Wt' ) );

ALTER TABLE rezerwacje_sal
    ADD CONSTRAINT tydzien CHECK ( tydzien IN ( 'Nieparzysty', 'Parzysty' ) );

ALTER TABLE rezerwacje_sal ADD CONSTRAINT rezerwacja_sali_pk PRIMARY KEY ( id );

ALTER TABLE rezerwacje_sal
    ADD CONSTRAINT rezerwacje_unique UNIQUE ( jednostka_zajeciowa,
                                              dzien_tygodnia,
                                              tydzien,
                                              sala_id );

CREATE TABLE sale (
    id    INTEGER NOT NULL,
    nazwa VARCHAR2(30) NOT NULL,
    typ   VARCHAR2(30) NOT NULL
);

ALTER TABLE sale ADD CONSTRAINT sala_pk PRIMARY KEY ( id );

ALTER TABLE sale ADD CONSTRAINT sale__un UNIQUE ( nazwa );

CREATE TABLE studenci (
    nr_indeksu          INTEGER NOT NULL,
    imie                VARCHAR2(30) NOT NULL,
    nazwisko            VARCHAR2(30) NOT NULL,
    liczba_punkt�w_ects INTEGER
);

ALTER TABLE studenci ADD CHECK ( liczba_punkt�w_ects BETWEEN 0 AND 9001 );

ALTER TABLE studenci ADD CONSTRAINT student_pk PRIMARY KEY ( nr_indeksu );

CREATE TABLE wydzialy (
    id    INTEGER NOT NULL,
    nazwa VARCHAR2(50) NOT NULL
);

ALTER TABLE wydzialy ADD CONSTRAINT wydzial_pk PRIMARY KEY ( id );

CREATE TABLE zajecia (
    id           INTEGER NOT NULL,
    forma_zajec  VARCHAR2(20) NOT NULL,
    ilosc_godzin INTEGER NOT NULL,
    grupa_id     INTEGER NOT NULL,
    kurs_id      INTEGER NOT NULL,
    pracownik_id INTEGER NOT NULL
);

ALTER TABLE zajecia
    ADD CHECK ( forma_zajec IN ( 'Cwiczenia', 'Laboratoria', 'Projekt', 'Wyklad' ) );

ALTER TABLE zajecia ADD CHECK ( ilosc_godzin > 0 );

ALTER TABLE zajecia ADD CONSTRAINT zaj?cia_pk PRIMARY KEY ( id );

ALTER TABLE zajecia
    ADD CONSTRAINT dydaktyk FOREIGN KEY ( pracownik_id )
        REFERENCES pracownicy ( id );

ALTER TABLE zajecia
    ADD CONSTRAINT grupa FOREIGN KEY ( grupa_id )
        REFERENCES grupy ( id );

ALTER TABLE grupy_studentow
    ADD CONSTRAINT grupav2 FOREIGN KEY ( grupa_id )
        REFERENCES grupy ( id );

ALTER TABLE kursy
    ADD CONSTRAINT kierownik_kursu_id FOREIGN KEY ( kierownik_kursu )
        REFERENCES pracownicy ( id );

ALTER TABLE kursy
    ADD CONSTRAINT kierunek FOREIGN KEY ( kierunek_studiow_id )
        REFERENCES kierunki_studiow ( id );

ALTER TABLE kierunki_studentow
    ADD CONSTRAINT kierunek_id FOREIGN KEY ( kierunek_studiow_id )
        REFERENCES kierunki_studiow ( id );

ALTER TABLE zajecia
    ADD CONSTRAINT kurs FOREIGN KEY ( kurs_id )
        REFERENCES kursy ( id );

ALTER TABLE oceny
    ADD CONSTRAINT przedmiot_id FOREIGN KEY ( zajecia_id )
        REFERENCES zajecia ( id );

ALTER TABLE rezerwacje_sal
    ADD CONSTRAINT sala FOREIGN KEY ( sala_id )
        REFERENCES sale ( id );

ALTER TABLE grupy_studentow
    ADD CONSTRAINT student FOREIGN KEY ( student_id )
        REFERENCES studenci ( nr_indeksu );

ALTER TABLE kierunki_studentow
    ADD CONSTRAINT student_id FOREIGN KEY ( student_id )
        REFERENCES studenci ( nr_indeksu );

ALTER TABLE oceny
    ADD CONSTRAINT student_idv2 FOREIGN KEY ( student_id )
        REFERENCES studenci ( nr_indeksu );

ALTER TABLE kierunki_studiow
    ADD CONSTRAINT wydzial FOREIGN KEY ( wydzial_id )
        REFERENCES wydzialy ( id );

ALTER TABLE rezerwacje_sal
    ADD CONSTRAINT zajecia FOREIGN KEY ( zajecia_id )
        REFERENCES zajecia ( id );

CREATE SEQUENCE kierunki_studiow_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER kierunki_studiow_id_trg BEFORE
    INSERT ON kierunki_studiow
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := kierunki_studiow_id_seq.nextval;
END;
/

CREATE SEQUENCE pracownicy_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER pracownicy_id_trg BEFORE
    INSERT ON pracownicy
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := pracownicy_id_seq.nextval;
END;
/

CREATE SEQUENCE sale_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER sale_id_trg BEFORE
    INSERT ON sale
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := sale_id_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            12
-- CREATE INDEX                             0
-- ALTER TABLE                             39
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           3
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          3
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0


CREATE OR REPLACE TRIGGER sprawdz_limit_godzin_przy_dodawaniu_zajec
	BEFORE INSERT ON zajecia
	FOR EACH ROW
	DECLARE
		tygodniowy_limit INTEGER;
		ilosc_godzin_w_semestrze INTEGER;
		suma_godzin INTEGER;
	BEGIN
		SELECT tygodniowy_limit_godzin INTO tygodniowy_limit
		FROM pracownicy
		WHERE id = :NEW.pracownik_id;

		IF tygodniowy_limit IS NOT NULL AND tygodniowy_limit > 0 THEN
			ilosc_godzin_w_semestrze := tygodniowy_limit * 15; -- 15 tygodni w semestrze (wartość domyślna)

			-- Oblicz sumę godzin z zajęć prowadzonych przez pracownika
			SELECT COALESCE(SUM(ilosc_godzin), 0)
			INTO suma_godzin
			FROM zajecia
			WHERE pracownik_id = :NEW.pracownik_id;

			-- Sprawdź limit godzin
			IF :NEW.ilosc_godzin + suma_godzin > ilosc_godzin_w_semestrze THEN
				RAISE_APPLICATION_ERROR(-20001, 'Przekroczony tygodniowy limit godzin pracy pracownika w semestrze.');
			END IF;
		END IF;
	END;
/

CREATE OR REPLACE FUNCTION OBLICZ_PUNKTY_ECTS (
    p_nr_indeksu NUMBER
) RETURN NUMBER AS
    v_suma_ects NUMBER := 0;
    CURSOR cur IS SELECT distinct KURS_ID FROM studenci s
                    JOIN oceny o ON s.nr_indeksu=o.student_id
                    JOIN zajecia z ON o.zajecia_id=z.id
                    JOIN kursy k ON z.kurs_id=k.id
                    WHERE s.nr_indeksu=p_nr_indeksu; 
    temp NUMBER := 0;
BEGIN
    FOR kurs_id_loop IN cur
    LOOP
        SELECT COUNT(*) INTO temp FROM studenci s
                    JOIN oceny o ON s.nr_indeksu=o.student_id
                    JOIN zajecia z ON o.zajecia_id=z.id
                    JOIN kursy k ON z.kurs_id=k.id
                    WHERE s.nr_indeksu=p_nr_indeksu AND z.kurs_id = kurs_id_loop.KURS_ID AND stopien='2.0';
        IF temp=0
        THEN
            SELECT punkty_ects INTO temp FROM kursy WHERE id=kurs_id_loop.KURS_ID;
            v_suma_ects := v_suma_ects + temp;
        END IF;

    END LOOP;

    RETURN v_suma_ects;
END OBLICZ_PUNKTY_ECTS;
/